## Commands
This section lists command(s) run by WORKFLOW workflow

* Running msisensor

=== Description here ===.

### Run msisensor-pro (the main step)

```
    set -euo pipefail

    msisensor-pro msi \
        -d ~{msifile} ~{"-e" + difficultRegions} \
        -n ~{normalbam} \
        -t ~{tumorbam} \
        -o ~{outputFileNamePrefix}.msi 

```

### Optional bootstrapping with the same inputs:

```
    set -euo pipefail

    for boot in {1..~{boots}}
    do
      shuf -n ~{loci} ~{msifile} >rep.list

      awk '$2 !~ "location" {print}' rep.list | \
        sort -k1,1 -k2,2n >rep.list.sorted

      msisensor-pro msi \
       -d rep.list.sorted ~{"-e " + difficultRegions} \
       -n ~{normalbam} -t ~{tumorbam} \
       -o ~{outputFileNamePrefix}.msi

      awk -v boot="${boot}" '$1 !~ "Total_Number_of_Sites" {print boot"\t"$1"\t"$2"\t"$3}' ~{outputFileNamePrefix}.msi >>~{outputFileNamePrefix}.msi.booted
    done

```

### Summarize Bootstrap Results

```
  
    set -euo pipefail

    python3 <<CODE
    import csv
    import os
    import numpy
    import json

    msi_boots = []
    with open("~{msibooted}", 'r') as msi_file:
        reader_file = csv.reader(msi_file, delimiter="\t")
        for row in reader_file:
            msi_boots.append(float(row[3]))
    
    # Calculate the percentiles
    msi_perc = numpy.percentile(numpy.array(msi_boots), [0, 25, 50, 75, 100])

    # Convert to JSON
    percentiles_dict = {
        "MSI_score_percentiles": {
            "0": msi_perc[0],
            "25": msi_perc[1],
            "50": msi_perc[2],
            "75": msi_perc[3],
            "100": msi_perc[4]
        }
    }
    percentiles_json = json.dumps(percentiles_dict, indent=4)

    with open("~{outputFileNamePrefix}.msi.bootstrap.metrics.json", 'w') as out_file:
      out_file.write(percentiles_json)

    CODE
```
